/*
    ==============================================================================

    Copyright 2019 - Paul Ferrand (paulfd@outlook.fr)

    This file was partly auto-generated by Juce.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

    ==============================================================================
*/

#pragma once

#include "../JuceLibraryCode/JuceHeader.h"
#include "PluginProcessor.h"
#include "Configuration.h"
#include "Watchers.h"
#include "RhythmChooser.h"
#include "SfzChooser.h"

class ConfigBox: public Component
{
public:
    ConfigBox(Configuration& config);
    ~ConfigBox() {}
    void paint(Graphics & g);
private:
    Configuration& config;
    Label mainCCLabel { "Main CC Label", "Main CC" };
    ComboBox mainCCBox;
    Label accentCCLabel { "Accent CC Label", "Accent CC" };
    ComboBox accentCCBox;
    Label inputChannelLabel { "Input Channel Label", "Input Channel" };
    ComboBox inputChannelBox;
    Label outputChannelLabel { "Output Channel Label", "Output Channel" };
    ComboBox outputChannelBox;
    ToggleButton randomFillsButton { "Use random fills" };
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (ConfigBox)
};

class StatusBox: public Component, public ValueTree::Listener
{
public:
    StatusBox(RhythmBoxAudioProcessor& processor);
    ~StatusBox();
    void paint(Graphics & g);
    // ValueTree::Listener callbacks
    void valueTreePropertyChanged (ValueTree& valueTree, const Identifier &property) override;
    // Unused
    void valueTreeChildAdded (ValueTree&, ValueTree&) override {}
    void valueTreeChildRemoved (ValueTree&, ValueTree&, int) override {}
    void valueTreeChildOrderChanged (ValueTree&, int, int) override {}
    void valueTreeParentChanged (ValueTree&) override {}
    void valueTreeRedirected (ValueTree&) override {}
private:
    Label selectedBeatLabel;
    Label selectedSfzLabel;
    Label lastCCLabel;

    RhythmBoxAudioProcessor& processor;
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (StatusBox)
};

class RhythmBoxAudioProcessorEditor : public AudioProcessorEditor
{
public:
    RhythmBoxAudioProcessorEditor (RhythmBoxAudioProcessor&, AudioProcessorValueTreeState& parameters, Configuration& config);
    ~RhythmBoxAudioProcessorEditor();
    //==============================================================================
    void paint (Graphics&) override;
    void resized() override;

    void playButtonClicked();
    void tapButtonClicked();

    typedef AudioProcessorValueTreeState::SliderAttachment SliderAttachment;

private:
    juce::OpenGLContext openGLContext;

    int64 lastTap { -1};
    RhythmBoxAudioProcessor& processor;
    AudioProcessorValueTreeState& processorParameters;
    Configuration& config;
    RhythmListComponent rhythmList { config };
    SfzListComponent sfzList { config };

    TextButton stopButton;
    TextButton playButton;
    TextButton fillButton;
    TextButton nextButton;
    TextButton endButton;
    TextButton tapButton;
    TextButton beatManagerButton;
    TextButton sfzManagerButton;

    StatusBox statusBox { processor };
    ConfigBox configBox { config };
    
    Slider tempoSlider;
    std::unique_ptr<SliderAttachment> tempoAttachment;
    Label tempoLabel;

    bool buttonWasDown{ false };
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (RhythmBoxAudioProcessorEditor)
};
